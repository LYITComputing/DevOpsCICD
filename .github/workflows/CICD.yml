name: Octopus Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:

    runs-on: self-hosted
    timeout-minutes: 6

    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    
    steps:
    - uses: actions/checkout@v2
    - name: Get build version
      run:  |
        $ref = "${env:GITHUB_REF}"
        $version = $ref.Substring($ref.LastIndexOf("/") + 2)
        echo "::set-env name=version::${version}"
    - name: Add Nuget Feed
      run:  |
        cd "${{ secrets.NUGETPATH }}"

        try {
          .\nuget.exe source Remove -Name VoiceNuget
        } catch { }

        .\nuget.exe sources add -Source "${{ secrets.NUGETURL }}" -Name "VoiceNuget" -Username "${{ secrets.NUGETUSER }}" -Password "${{ secrets.NUGETPASS }}"
    - name: Clean Solution
      run:  |
        cd "${{ secrets.MSBUILDPATH }}"
        .\MSBuild.exe "${env:GITHUB_WORKSPACE}" -t:clean -p:Configuration=Release
    - name: Install dependencies
      run:  |
        cd "${{ secrets.NUGETPATH }}"
        .\nuget.exe restore "${env:GITHUB_WORKSPACE}"
    - name: Prepare Output Directory
      run:  |
        $rootPath = "${{ secrets.BUILDTOOLSOUT }}"
        $repoPath = "${env:GITHUB_REPOSITORY}"
        $ref = "${env:GITHUB_REF}"
        $repoName = $repoPath.Substring($repoPath.LastIndexOf("/") + 1)
        $branch = $ref.Substring($ref.LastIndexOf("/") + 2)

        $outpath = $rootPath + "\" + $repoName + "\" + $branch
        if((Test-Path $outpath) -eq 1) {
            rmdir $outpath -Recurse
        } 

        mkdir $outpath;
        echo "::set-env name=outpath::${outpath}"
    - name: Build Solution (before tests)
      run:  |
        cd "${{ secrets.MSBUILDPATH }}"
        .\MSBuild.exe "${env:GITHUB_WORKSPACE}" -restore -validate -t:rebuild -p:Configuration=Release -p:VisualStudioVersion=16.0 -p:Version=${env:version}
    - name: Build Solution to Publish (after tests)
      run:  |
        cd "${{ secrets.MSBUILDPATH }}"
        .\MSBuild.exe "${env:GITHUB_WORKSPACE}" -t:rebuild -p:Configuration=Release -p:VisualStudioVersion=16.0 -p:DeployOnBuild=true -p:DeployWebApp=true -p:PublishProfile="C:\buildtools\GitHub.pubxml" -p:PublishUrl="${env:outpath}\published" -p:WarningAsErrors=false -p:Version=${env:version}
    - name: Nuget pack
      run:  |
        $packageId = '${{ secrets.OCTONUGETNAME }}'        

        if ($packageId -eq '' -or $packageId -eq '***') {
            $packageId = '${env:repoName}'
        }

        octo pack --id=$packageId --version=${env:version} --outFolder=${env:outpath}\Packed --basePath=${env:outpath}\Published
    - name: Octopus Deploy
      run: |
        $nugets = ( Get-ChildItem -Path "${env:outpath}\Packed" -Recurse -Filter *.nupkg ).Name
        foreach ($nuget in $nugets) {
          octo push --package="${env:outpath}\Packed\$nuget" --server="${{ secrets.OCTOPUSURL }}" --apiKey="${{ secrets.OCTOPUSAPIKEY }}" --use-delta-compression=false
        }
    - name: Octopus Create Release
      run: |
        octo create-release --project ${{ secrets.OCTOPUSPROJECTNAME }} --version ${env:version} --packageVersion ${env:version} --server="${{ secrets.OCTOPUSURL }}" --apiKey="${{ secrets.OCTOPUSAPIKEY }}"
